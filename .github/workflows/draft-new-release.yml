name: "Draft new release"

on:
  issues:
    types: [opened, labeled]

jobs:
  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    # Only run for issues with a specific title and label. Not strictly required but makes finding the release issue again later easier.
    # There is also a whitelist that you may want to use to restrict, who can trigger this workflow.
    # Unfortunately, we cannot create an array on the fly, so the whitelist is just comma-separated.
    if: startsWith(github.event.issue.title, 'Release version') && contains(github.event.issue.labels.*.name, 'release') && contains('rosslh', github.event.issue.user.login)
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Extract version from issue title
        run: |
          TITLE="${{ github.event.issue.title }}"
          VERSION=${TITLE#Release version }

          echo "::set-env name=RELEASE_VERSION::$VERSION"

      - name: Create release branch
        run: git checkout -b release/${{ env.RELEASE_VERSION }}

      - name: Update changelog
        uses: thomaseizinger/keep-a-changelog-new-release@1.1.0
        with:
          version: ${{ env.RELEASE_VERSION }}

      # In order to make a commit, we need to initialize a user.
      # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub actions"
          git config user.email noreply@github.com

      - name: Commit changelog and manifest files
        id: make-commit
        run: |
          git add CHANGELOG.md
          git commit --message "Prepare release ${{ env.RELEASE_VERSION }}"

          echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Push new branch
        run: git push origin release/${{ env.RELEASE_VERSION }}

      - name: Create pull request
        uses: thomaseizinger/create-pull-request@1.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          head: release/${{ env.RELEASE_VERSION }}
          base: master
          title: ${{ github.event.issue.title }}
          reviewers: ${{ github.event.issue.user.login }} # By default, we request a review from the person who opened the issue. You can replace this with a static list of users.
          # Write a nice message to the user.
          # We are claiming things here based on the `publish-new-release.yml` workflow.
          # You should obviously adopt it to say the truth depending on your release workflow :)
          body: |
            Hi @${{ github.event.issue.user.login }}!

            This PR was created in response to this release issue: #${{ github.event.issue.number }}.
            I've updated the changelog and bumped the versions in the manifest files in this commit: ${{ steps.make-commit.outputs.commit }}.

            Merging this PR will update the master branch and create a GitHub release.
